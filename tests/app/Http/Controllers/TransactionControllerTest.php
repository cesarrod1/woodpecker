<?php


namespace app\Http\Controllers;


use App\Models\Retailer;
use App\Models\User;
use Laravel\Lumen\Testing\TestCase;

class TransactionControllerTest extends TestCase
{
    public function createApplication()
    {
        return require './bootstrap/app.php';
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testUserShouldBeExistingOnProviderToTransfer()
    {
        $this->artisan('passport:install');
        $user = User::factory()->create();
        $payload = [
            'provider' => 'user',
            'payee_id' => '998',
            'amount' => 100
        ];
        $request = $this->actingAs($user, 'users')
            ->post(route('transaction'), $payload);

        $request->assertResponseStatus(422);
    }

    public function testRetailerShouldNotTransfer()
    {
        $this->artisan('passport:install');
        $retailer = Retailer::factory()->create();
        $payload = [
            'provider' => 'user',
            'payee_id' => '999',
            'amount' => 100
        ];
        $request = $this->actingAs($retailer, 'retailers')
            ->post(route('transaction'), $payload);

        $request->assertResponseStatus(422);
    }

    public function testUserShouldHaveMoneyToPerformSomeTransaction()
    {
        $this->artisan('passport:install');
        $payer = User::factory()->create();
        $payee = User::factory()->create();

        $payload = [
            'provider' => 'user',
            'payee_id' => $payee->id,
            'amount' => 100
        ];
        $request = $this->actingAs($payer, 'retailers')
            ->post(route('transaction'), $payload);

        $request->assertResponseStatus(422);
    }

    public function testUserCanTransferMoney()
    {
        $this->artisan('passport:install');
        $payer = User::factory()->create();
        $payer->wallet->deposit(1000);
        $payee = User::factory()->create();

        $payload = [
            'provider' => 'users',
            'payee_id' => $payee->id,
            'amount' => 100
        ];
        $request = $this->actingAs($payer, 'users')
            ->post(route('transaction'), $payload);

        $request->assertResponseStatus(200);

        $request->seeInDatabase('wallets', [
            'id' => $payer->wallet->id,
            'amount' => 900
        ]);

        $request->seeInDatabase('wallets', [
            'id' => $payee->wallet->id,
            'amount' => 100
        ]);
    }

}
